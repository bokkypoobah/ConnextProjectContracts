import { expect } from 'chai'
import { syncDequeueItem, syncDequeueAllItems } from './syncDequeueItem';
import { INITIAL_STATE, WorkerState } from '../worker/WorkerState/WorkerState';
import { createStore } from 'redux';
import reducers from '../worker/reducers';

const syncItem1 = {arbitrary: 'object representing a sync item'} as any
const syncItem2 = {arbitrary: 'another object representing a sync item'} as any

const stateWithSyncItems: WorkerState = {
  ...INITIAL_STATE,
  runtime: {
    ...INITIAL_STATE.runtime,
    syncQueue: [
      syncItem1,
      syncItem2,
    ]
  }
}
describe('syncDequeueItem', () => {
  it('should dequeue if there are items', () => {
    const store = createStore(reducers, stateWithSyncItems)

    expect(
      syncDequeueItem(store)
    ).to.deep.equal(syncItem1)

    expect(
      syncDequeueItem(store)
    ).to.deep.equal(syncItem2)

    expect(
      syncDequeueItem(store)
    ).equals(null)
  })

  it('should return null if there are no items in the queue', () => {
    const store = createStore(reducers, INITIAL_STATE)

    expect(
      syncDequeueItem(store)
    ).equals(null)
  })
})

describe('syncDequeueAllItems', () => {
  it('shoudl dequeue all items', () => {
    const store = createStore(reducers, stateWithSyncItems)

    expect(
      syncDequeueAllItems(store)
    ).to.deep.equal([syncItem1, syncItem2])

    expect(
      store.getState().runtime.syncQueue.length
    ).equals(0)
  })

  it('should return an empty array if there are no items', () => {
    const store = createStore(reducers, INITIAL_STATE)

    expect(
      syncDequeueAllItems(store)
    ).to.deep.equal([])
  })
})
