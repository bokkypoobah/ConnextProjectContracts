import { expect } from 'chai'
import { SyncResult } from './connext-client/types';
import MockStore from '../mocks/MockStore';
import { threadSyncResult, channelSyncResult } from '../mocks/threadSyncResult';
import { syncEnqueueItems } from './syncEnqueueItems';

describe('syncEnqueueItems', () => {
  let mockStore: MockStore
  let syncItems: SyncResult[]
  let address: string
  let receiver: string

  beforeEach(async () => {
    mockStore = new MockStore()
    address = await mockStore.setInitialWallet()

    receiver = await (new MockStore).setInitialWallet()
  })

  it('should enqueue sync items', () => {
    mockStore.setGlobalTxCount(5)
    mockStore.setLastThreadId(9)

    const store = mockStore.createStore()

    syncItems = [threadSyncResult(address, receiver, 5, 10)]

    syncEnqueueItems(store, syncItems)

    expect(
      store.getActions()
    ).to.deep.equal([
      {
        payload: syncItems,
        type: 'worker/persistent/enqueueSyncItem',
      },
    ])
  })

  it('should not enqueue thread updates with older threadId than the redux store', () => {
    mockStore.setGlobalTxCount(5)
    mockStore.setLastThreadId(9)

    const store = mockStore.createStore()

    syncItems = [threadSyncResult(address, receiver, 5, 8)]

    syncEnqueueItems(store, syncItems)

    expect(
      store.getActions()
    ).to.deep.equal([])
  })

  it('should not enque channel updates with older txCount than the redux store', () => {
    mockStore.setGlobalTxCount(5)
    mockStore.setLastThreadId(9)

    const store = mockStore.createStore()

    syncItems = [channelSyncResult('ConfirmPending', address, 4, address)]

    syncEnqueueItems(store, syncItems)

    expect(
      store.getActions()
    ).to.deep.equal([])
  })

  it('should not enqueue channel updates with an older txCount than the current queue', () => {
    mockStore.setGlobalTxCount(5)
    mockStore.setLastThreadId(9)

    mockStore._initialState = {
      ...mockStore._initialState,
      runtime: {
        ...mockStore._initialState.runtime,
        syncQueue: [channelSyncResult('ProposePending', address, 7, address)]
      }
    }

    const store = mockStore.createStore()

    syncItems = [channelSyncResult('ConfirmPending', address, 6, address)]

    syncEnqueueItems(store, syncItems)

    expect(
      store.getActions()
    ).to.deep.equal([])
  })
})