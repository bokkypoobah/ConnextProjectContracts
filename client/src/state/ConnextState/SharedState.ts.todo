import { AuthorizationRequestState } from "./AuthorizationRequestState";
import { BrandingState } from "./BrandingState";
import { HistoryItem } from "./HistoryItem";
import { CurrencyType } from "./CurrencyTypes";
import { FeatureFlags } from "./FeatureFlags";
import { MigrationState } from "./MigrationState";
import { WorkerState, ZERO_STATE } from "./WorkerState";
import { ExchangeRates } from "./ExchangeRates";
import { ChannelState, Payment } from "../../lib/connext-client/types";

export interface SharedState {
  didInit: boolean
  isLocked: boolean
  isTransactionPending: number
  rememberPath: string
  lastUpdateDb: number
  currentHubUrl: string
  currentAuthToken: string
  currentAuthRealm: string
  authorizationRequest: AuthorizationRequestState | null
  isFrameDisplayed: boolean
  forceRedirect?: string
  isPerformer?: boolean
  isPendingVerification: boolean
  needsCollateral: boolean
  branding: BrandingState
  channel: ChannelState<string>
  history: HistoryItem[]
  addressBalances: Payment
  address: string | null
  hasActiveWithdrawal: boolean
  hasActiveDeposit: boolean
  hasActiveExchange: boolean
  username: string | null
  activeWithdrawalError: string|null
  baseCurrency: CurrencyType
  renderedCurrency: CurrencyType
  exchangeRates: ExchangeRates|null
  featureFlags: FeatureFlags
  moreEthNeeded: boolean
  migrationState: MigrationState
  currentMigration?: any
}

export const INITIAL_SHARED_STATE: SharedState = {
  didInit: false,
  isLocked: true,
  isTransactionPending: 0,
  rememberPath: '/',
  lastUpdateDb: 0,
  authorizationRequest: null,
  currentHubUrl: process.env.HUB_URL!,
  currentAuthRealm: '',
  currentAuthToken: '',
  isFrameDisplayed: false,
  isPerformer: false,
  isPendingVerification: false,
  needsCollateral: false,
  branding: {
    address: ''
  },
  channel: ZERO_STATE,
  history: [],
  addressBalances: {wei: '0', token: '0'},
  address: null,
  hasActiveWithdrawal: false,
  activeWithdrawalError: null,
  hasActiveDeposit: false,
  hasActiveExchange: false,
  exchangeRates: null,
  username: null,
  baseCurrency: CurrencyType.WEI,
  renderedCurrency: CurrencyType.BOOTY,
  featureFlags: {},
  moreEthNeeded: false,
  migrationState: 'DONE',
  currentMigration: null,
}

export function buildSharedState (state: WorkerState): SharedState {
  return {
    didInit: state.persistent.didInit,
    isLocked: !state.runtime.wallet,
    isTransactionPending: state.runtime.isTransactionPending,
    rememberPath: state.persistent.rememberPath,
    lastUpdateDb: state.runtime.lastUpdateDb,
    currentHubUrl: state.runtime.currentHubUrl,
    currentAuthRealm: state.runtime.currentAuthRealm,
    currentAuthToken: state.runtime.currentAuthToken,
    authorizationRequest: state.runtime.authorizationRequest,
    isFrameDisplayed: state.runtime.isFrameDisplayed,
    forceRedirect: state.runtime.forceRedirect,
    isPerformer: state.runtime.isPerformer,
    needsCollateral: state.runtime.needsCollateral,
    isPendingVerification: state.runtime.isPendingVerification,
    branding: state.runtime.branding,
    channel: state.persistent.channel,
    history: state.runtime.history,
    addressBalances: state.runtime.addressBalances,
    address: state.runtime.wallet ? state.runtime.wallet.getAddressString() : null,
    hasActiveWithdrawal: state.runtime.hasActiveWithdrawal,
    activeWithdrawalError: state.runtime.activeWithdrawalError,
    hasActiveDeposit: state.runtime.hasActiveDeposit,
    hasActiveExchange: state.runtime.hasActiveExchange,
    exchangeRates: state.runtime.exchangeRates,
    username: state.runtime.username,
    baseCurrency: state.runtime.baseCurrency,
    renderedCurrency: state.runtime.renderedCurrency,
    featureFlags: state.runtime.featureFlags,
    moreEthNeeded: false,
    migrationState: state.runtime.migrationState,
    currentMigration: null,
  }
}
